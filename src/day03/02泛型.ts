// 泛型
// 泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用，常用于：函数，接口，class中。

// 需求：创建一个id函数，传入什么数据就返回该数据本身（也就是说，参数和返回值类型相同）。

// function id(value: number): number {
//   return value;
// }

// 比如，id（10）调用以上函数就会直接返回10本身。但是，该函数只接受数值类型，无法用于其他类型。

// 为了能让函数接受任意类型，可以将参数类型修改为any。但是，这样就失去了TS的类型保护，类型不安全。

// 传入的类型与返回的类型应该是相同的。如果我们传入一个数字，我们只知道任何类型的值都有可能被返回。
// ————————————————
// 版权声明：本文为CSDN博主「蜡笔雏田学前端」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
// 原文链接：https://blog.csdn.net/xuxuii/article/details/126724000

//function id(value: any): any { return value }

// 泛型在保证类型安全（不丢失类型信息）的同时，可以让函数等与多种不同的类型一起工作，灵活可复用。

// 实际上，在C#和Java等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一。

function id<Type>(value: Type): Type {
  return value;
}

// 解释：

// 语法：在函数名称的后面添加< >(尖括号)，尖括号中添加类型变量，比如此处的Type。
// 类型变量Type，是一种特殊类型的变量，只用于表示类型而不是值。
// Type类型变量相当于一个类型容器，能够捕获用户传入的类型（比如：number）（具体是什么类型由用户>调用该函数时指定）。
// 因为Type是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型。
// 类型变量Type，可以是任意合法的变量名称。
// ————————————————
// 版权声明：本文为CSDN博主「蜡笔雏田学前端」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
// 原文链接：https://blog.csdn.net/xuxuii/article/details/126724000
