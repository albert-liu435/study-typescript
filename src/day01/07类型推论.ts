// 2. 类型推论
// 在TS中，某些没有明确指出类型的地方，TS的类型推论机制会帮助提供类型。

// 换句话说，由于类型推论的存在，这些地方，类型注解可以省略不写！

// 发生类型推论的两种常见场景：

// 声明变量并初始化时
// 声明变量并立即初始化值，此时，可以省略类型注解
let age1 = 18; // 鼠标移入变量名称age，TS自动推断出变量age为number类型

// age = ''

// 注意：如果声明变量但没有立即初始化值，此时，还必须手动添加类型注解
let a: number;

a = 19;
// a = ''

// --

// 如图：省略了add（）函数返回值类型（：number）

// 鼠标移入函数add（）时，TS自动根据num1和num2两个变量的类型推断出返回值的类型是number。

// 注意：这两种情况下，类型注解可以省略不写

// 推荐：能省略类型注解的地方就省略（充分利用TS类型推论的能力，提升开发效率）。

// 技巧：如果不知道类型，可以通过鼠标放在变量名称上，利用VSCode的提示来查看类型。
// ————————————————
// 版权声明：本文为CSDN博主「蜡笔雏田学前端」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
// 原文链接：https://blog.csdn.net/xuxuii/article/details/126569192

function add(num1: number, num2: number) {
  return num1 + num2;
}

add(1, 3);
// add(false, 3)

console.log("object");
